searchState.loadedDescShard("rdf", 0, "rdf-rs\nContains the error value\nContains the success value\nRDF reader reaches the end of the input and stores the …\nAn error related to the rdf-rs module.\nDifferent types of errors that can occur.\nInput reader encounters invalid byte encoding.\nIncorrect namespace.\nRDF lexer reads invalid RDF (e.g. non-closing string).\nRDF reader reads an invalid token (e.g. invalid node type).\nRDF writer produces invalid RDF (e.g. if invalid node …\nReturns the type of the error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor of <code>Error</code>.\nRepresentation of an RDF graph.\nAdds a new namespace with a specific prefix to the graph.\nAdds a triple to the graph.\nAdds a vector of triples.\nReturns the base URI of the graph.\nReturns the number of triples that are stored in the graph.\nCreates a blank node with a unique ID.\nCreates a blank node with the specified ID.\nReturns a literal node of the specified namespace.\nReturns a literal node with a specified data type.\nReturns a literal node with a specified language.\nCreates a new URI node.\nReturns the argument unchanged.\nReturns the URI of a namespace with the provided prefix.\nReturns all triples from the store that have the specified …\nReturns all triples from the store that have the specified …\nReturns all triples from the triple store where the …\nReturns all triples from the store that have the specified …\nReturns all triples from the triple store where the …\nReturns all triples from the triple store where the …\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the graph does not contain any triples.\nReturns a hash map of namespaces and prefixes.\nConstructor for the RDF graph.\nDeletes the triple from the graph.\nSets the base URI of the graph.\nReturns an iterator over the triples of the graph.\nRepresentation of a specific namespace.\nStorage for multiple namespaces.\nAdds a new namespace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the URI of a specific namespace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the stored namespaces with prefixes.\n<code>Namespace</code> constructor.\nConstructor for <code>NamespaceStore</code>.\nReturns the prefix of the namespace.\nReturns the URI of the namespace.\nNode for representing blanks.\nNode for representing literals.\nNode representation.\nNode for representing a URI.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a sequence of read input characters.\nReads input and transforms it to <code>InputChars</code>.\nCollection of several helper methods that can be used when …\nReturns <code>true</code> if the provided character is a digit.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the next character of an input source.\nReturns the next character of an input source that is not …\nReturns the next <code>k</code> characters of an input source and …\nReturns all characters of a input source until a certain …\nReturns all characters of a input source until a certain …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the provided character is a line break.\nConstructor for <code>InputReader</code>.\nReturns <code>true</code> if the provided character can be used to …\nReturns the next character but does not consume it.\nReturns the next character that is not a whitespace but …\nReturns the next <code>k</code> characters but does not consume them.\nReturns all characters of a input source until a certain …\nReturns all characters without consuming them of a input …\nReturns <code>true</code> if the provided character is a whitespace.\nProduces tokens from NTriples input.\nReturns the argument unchanged.\nDetermines the next token from the input.\nCalls <code>U::from(self)</code>.\nConstructor for <code>NTriplesLexer</code>;\nDetermines the next token without consuming it.\nTrait implemented by RDF lexer.\nDetermines the next token from the input.\nConstructor.\nTokens are produces by RDF lexers.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nProduces tokens from Turtle syntax input.\nReturns the argument unchanged.\nDetermines the next token from the input and consumes the …\nCalls <code>U::from(self)</code>.\nConstructor for <code>TurtleLexer</code>.\nDetermines the next token without consuming the input.\nRDF parser to generate an RDF graph from N-Triples syntax.\nGenerates an RDF graph from a string containing N-Triples …\nReturns the argument unchanged.\nConstructor of <code>NTriplesParser</code> from input reader.\nConstructor of <code>NTriplesParser</code> from input string.\nCalls <code>U::from(self)</code>.\nTrait implemented by RDF parsers to generate a RDF graph …\nGenerates an RDF graph from a provided RDF syntax. Returns …\nRDF parser to generate an RDF graph from Turtle syntax.\nGenerates an RDF graph from a string containing Turtle …\nReturns the argument unchanged.\nConstructor of <code>TurtleParser</code> from input reader.\nConstructor of <code>TurtleParser</code> from input string.\nCalls <code>U::from(self)</code>.\nRDF Schema data types and vocabulary.\nContains general RDF specification rules and helpers.\nReplaces all characters with their escaped counterparts.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a specific data type as string.\nReturns a specific data type as URI.\nContains specifications for validating turtle syntax.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the provided literal is a boolean.\nChecks if the provided literal is decimal.\nChecks if the provided literal is an integer.\nChecks if the provided literal is a plain literal that …\nXML schema data types.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a specific data type as string.\nReturns a specific data type as URI.\nTriple representation.\nTriple segment.\nStorage for triples.\nAdds a new triple to the store.\nReturns the number of triples that are stored.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns all blank nodes of the store.\nReturns all triples where the object node matches the …\nReturns all triples where the predicate node matches the …\nReturns all triples where the predicate and object nodes …\nReturns all triples where the subject node matches the …\nReturns all triples where the subject and object nodes …\nReturns all triples where the subject and predicate nodes …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the stored triples as vector.\nChecks if the triple store is empty.\nReturns an iterator over the stored triples.\nConstructor for Triple struct.\nConstructs a new triple store.\nReturns a reference to the object node of the triple.\nReturns a reference to the predicate node of the triple.\nDeletes the triple from the store.\nReturns a reference to the subject node of the triple.\ntodo\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the string representation of the URI.\nFormatter for formatting nodes to N-Triple syntax. This …\nFormats the content of a blank node to the corresponding …\nFormats a literal to the corresponding N-Triples syntax.\nReturns the corresponding N-Triple formatting for a node.\nFormats a URI to N-Triples syntax.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor of <code>NTriplesFormatter</code>.\nTrait implemented by RDF formatters for formatting nodes.\nFormats the content of a blank node.\nFormats a literal.\nDetermines the node and its corresponding format.\nFormats a URI.\nFormatter for formatting nodes to Turtle syntax. This …\nFormats the content of a blank node to the corresponding …\nFormats a literal to the corresponding Turtle syntax.\nReturns the corresponding Turtle formatting for a node.\nFormats a URI to Turtle syntax.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor of <code>TurtleFormatter</code>.\nRDF writer to generate N-Triples syntax.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor of <code>NTriplesWriter</code>.\nConverts a single node to its corresponding N-Triples …\nGenerates the corresponding N-Triples syntax of the …\nGenerates the N-Triples syntax for each triple stored in …\nTrait implemented by RDF writers to generate a specific …\nGenerates RDF syntax from a provided RDF graph and writes …\nRDF writer to generate Turtle syntax.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstructor of <code>TurtleWriter</code>.\nGenerates the Turtle syntax for each triple stored in the …")